package com.example.myappimport android.Manifestimport android.content.pm.PackageManagerimport android.location.Geocoderimport android.location.Locationimport android.os.Bundleimport android.util.Logimport androidx.appcompat.app.AppCompatActivityimport androidx.core.app.ActivityCompatimport androidx.databinding.DataBindingUtilimport com.example.myapp.BuildConfig.MAPS_API_KEYimport com.example.myapp.databinding.ActivityMainBindingimport com.google.android.gms.common.api.Statusimport com.google.android.gms.location.FusedLocationProviderClientimport com.google.android.gms.location.LocationCallbackimport com.google.android.gms.location.LocationServicesimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.GoogleMapimport com.google.android.gms.maps.OnMapReadyCallbackimport com.google.android.gms.maps.SupportMapFragmentimport com.google.android.gms.maps.model.LatLngimport com.google.android.gms.maps.model.Markerimport com.google.android.gms.maps.model.MarkerOptionsimport com.google.android.libraries.places.api.Placesimport com.google.android.libraries.places.api.model.AutocompletePredictionimport com.google.android.libraries.places.api.model.Placeimport com.google.android.libraries.places.api.net.PlacesClientimport com.google.android.libraries.places.widget.AutocompleteSupportFragmentimport com.google.android.libraries.places.widget.listener.PlaceSelectionListenerprivate const val LOG = "ggwp"class MainActivity : AppCompatActivity(), OnMapReadyCallback, GoogleMap.OnMarkerClickListener {    private var binding: ActivityMainBinding? = null    private var permissionDenied = false    private lateinit var map: GoogleMap    private lateinit var lastLocation: Location    private lateinit var fusedLocationProviderClient: FusedLocationProviderClient    private lateinit var placeClient: PlacesClient    private lateinit var predictionsList: List<AutocompletePrediction>    private lateinit var locationCallback: LocationCallback    var centerLatLang: LatLng? = null    companion object {        private const val LOCATION_REQUEST_CODE = 1        private const val AUTOCOMPLETE_REQUEST_CODE = 2    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)        binding?.viewModel = MainViewModel()        binding?.lifecycleOwner = this        binding?.executePendingBindings()        //map        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment        mapFragment.getMapAsync(this)        //search bar auto        val autocompleteFragment = supportFragmentManager.findFragmentById(R.id.autocomplete_fragment) as AutocompleteSupportFragment        autocompleteFragment.setPlaceFields(listOf(Place.Field.ID, Place.Field.NAME, Place.Field.LAT_LNG, Place.Field.ADDRESS))        autocompleteFragment.setCountries("TH")        autocompleteFragment.setOnPlaceSelectedListener(object : PlaceSelectionListener {            override fun onPlaceSelected(place: Place) {                placeMarkerOnMap(place.latLng, "${place.name} ${place.address}")            }            override fun onError(status: Status) {                Log.i(LOG, "An error occurred: $status")            }        })        //get places        Places.initialize(this, MAPS_API_KEY)        placeClient = Places.createClient(this)        //get my location        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)        binding?.pin?.setOnClickListener {            placeMarkerOnMap(centerLatLang, getAddress(centerLatLang))        }    }    override fun onMarkerClick(p0: Marker) = false    override fun onMapReady(p0: GoogleMap) {        map = p0        map.uiSettings.isZoomControlsEnabled = true        map.uiSettings.isMyLocationButtonEnabled = false        map.setOnMarkerClickListener(this)        setUpMap()        map.setOnCameraMoveListener {            centerLatLang = map.cameraPosition.target        }    }    private fun setUpMap() {        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)            != PackageManager.PERMISSION_GRANTED        ) {            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_REQUEST_CODE)            return        }        map.isMyLocationEnabled = true        fusedLocationProviderClient.lastLocation.addOnSuccessListener(this) { location ->            if (location != null) {                lastLocation = location                val currentLatLong = LatLng(location.latitude, location.longitude)                placeMarkerOnMap(currentLatLong, getAddress(currentLatLong))            }        }    }    private fun placeMarkerOnMap(currentLatLong: LatLng?, title: String?) {        if (currentLatLong != null) {            map.clear()            val marker: Marker? = map.addMarker(MarkerOptions().position(currentLatLong).title(title))            marker?.showInfoWindow()            map.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLong, 18f))        }    }    private fun getAddress(lat: LatLng?): String {        val geocoder = Geocoder(this)        val list = geocoder.getFromLocation(lat?.latitude ?: 0.0, lat?.longitude ?: 0.0, 1)        return if (list != null && list.size != 0) list[0].getAddressLine(0) else ""    }}